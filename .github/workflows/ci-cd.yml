name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - "renovate/**"
  pull_request:
    branches:
      - main
  workflow_dispatch:

# Prevent concurrent runs on the same ref, but allow PRs to cancel in-progress runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

# Global environment variables
env:
  PYTHON_VERSION_DEFAULT: "3.13"
  UV_CACHE_SUFFIX_KEY: ${{ hashFiles('uv.lock') }}

jobs:
  quality-assurance:
    name: QA - Python ${{ matrix.python-version }}
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    permissions:
      contents: read

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0

      - name: Set up Python tooling
        uses: astral-sh/setup-uv@d0cc045d04ccac9d8b7881df0226f9e82c39688e # v6
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true
          cache-suffix: ${{ env.UV_CACHE_SUFFIX_KEY }}

      - name: Install project dependencies
        run: uv sync --all-groups --frozen

      - name: Run code formatters
        run: |
          make format
          make fix

      - name: Run static analysis and linting
        run: make lint

      - name: Execute test suite with coverage
        run: make test-cov

      - name: Upload coverage reports
        if: always()
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5
        with:
          files: ./coverage.xml
          flags: python-${{ matrix.python-version }}
          name: coverage-python-${{ matrix.python-version }}
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Clean UV cache
        if: always()
        run: uv cache prune --ci

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0

      - name: Set up Python tooling
        uses: astral-sh/setup-uv@d0cc045d04ccac9d8b7881df0226f9e82c39688e # v6
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          enable-cache: true
          cache-suffix: ${{ env.UV_CACHE_SUFFIX_KEY }}

      - name: Install project dependencies
        run: uv sync --all-groups --frozen

      - name: Run Bandit security analyzer
        run: make bandit

      - name: Upload Bandit SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@64d10c13136e1c5bce3e5fbde8d4906eeaafc885 # v3
        continue-on-error: true
        with:
          sarif_file: bandit.sarif
          category: bandit

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          scan-type: "fs"
          skip-dirs: ".git,.github,.venv,docs/_build"
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          exit-code: 0

      - name: Upload Trivy SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@64d10c13136e1c5bce3e5fbde8d4906eeaafc885 # v3
        continue-on-error: true
        with:
          sarif_file: trivy-results.sarif
          category: trivy

      - name: Clean UV cache
        if: always()
        run: uv cache prune --ci

  build-package:
    name: Build Distribution
    needs:
      - quality-assurance
      - security-scan
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    permissions:
      contents: read

    env:
      ARTIFACTS_DIR: dist
      LOCK_FILE: uv.lock

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          ref: ${{ github.sha }}
          fetch-depth: 0

      - name: Configure Git branch
        run: git checkout -B ${{ github.ref_name }}

      - name: Set up Python tooling
        uses: astral-sh/setup-uv@d0cc045d04ccac9d8b7881df0226f9e82c39688e # v6
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          enable-cache: true
          cache-suffix: ${{ env.UV_CACHE_SUFFIX_KEY }}

      - name: Install build dependencies
        run: uv sync --group build --no-default-groups --frozen

      - name: Generate package version
        id: version
        env:
          GH_TOKEN: "none"
        run: uv run semantic-release -v version --no-commit --no-tag

      - name: Upload distribution artifacts
        if: steps.version.outputs.released == 'true'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: python-package-distributions
          path: ${{ env.ARTIFACTS_DIR }}/*
          if-no-files-found: error
          retention-days: 2

      - name: Upload updated lock file
        if: steps.version.outputs.released == 'true'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: dependency-lock
          path: ${{ env.LOCK_FILE }}
          if-no-files-found: error
          retention-days: 2

      - name: Clean UV cache
        if: always()
        run: uv cache prune --ci

    outputs:
      released: ${{ steps.version.outputs.released }}
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}

  integration-test:
    name: Integration Tests
    needs: build-package
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          ref: ${{ github.sha }}
          fetch-depth: 1

      - name: Download built distribution
        if: needs.build-package.outputs.released == 'true'
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: python-package-distributions
          path: ./dist

      - name: Set up Python tooling
        uses: astral-sh/setup-uv@d0cc045d04ccac9d8b7881df0226f9e82c39688e # v6
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          enable-cache: true
          cache-suffix: ${{ env.UV_CACHE_SUFFIX_KEY }}

      - name: Install project dependencies
        run: uv sync --frozen

      - name: Install built package
        if: needs.build-package.outputs.released == 'true'
        run: |
          uv pip uninstall cb-events
          uv pip install dist/cb_events-*.whl

      - name: Execute end-to-end tests
        run: make test-e2e

      - name: Clean UV cache
        if: always()
        run: uv cache prune --ci

  publish-release:
    name: Publish Release
    needs:
      - build-package
      - integration-test
    if: github.ref == 'refs/heads/main' && needs.build-package.outputs.released == 'true'
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    permissions:
      contents: write

    # Prevent concurrent releases
    concurrency:
      group: ${{ github.workflow }}-release
      cancel-in-progress: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Reset to workflow commit SHA
        run: git reset --hard ${{ github.sha }}

      - name: Set up Python tooling
        uses: astral-sh/setup-uv@d0cc045d04ccac9d8b7881df0226f9e82c39688e # v6
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          enable-cache: true
          cache-suffix: ${{ env.UV_CACHE_SUFFIX_KEY }}

      - name: Install build dependencies
        run: uv sync --group build --no-default-groups --frozen

      - name: Download distribution artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: python-package-distributions
          path: dist

      - name: Download updated lock file
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: dependency-lock

      - name: Stage lock file for commit
        run: git add uv.lock

      - name: Verify upstream branch status
        shell: bash
        run: bash .github/workflows/verify_upstream.sh

      - name: Create GitHub release
        id: release
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          uv run semantic-release -v --strict version --skip-build
          uv run semantic-release publish

      - name: Clean UV cache
        if: always()
        run: uv cache prune --ci

    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
      tag: ${{ steps.release.outputs.tag }}

  deploy-pypi:
    name: Deploy to PyPI
    needs:
      - build-package
      - publish-release
    if: >-
      github.ref == 'refs/heads/main' &&
      needs.publish-release.outputs.released == 'true' &&
      github.repository == 'MountainGod2/cb-events'
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    permissions:
      contents: read
      id-token: write

    environment:
      name: pypi
      url: https://pypi.org/project/cb-events/${{ needs.publish-release.outputs.version }}/

    steps:
      - name: Download distribution artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: python-package-distributions
          path: dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1
        with:
          packages-dir: dist
          print-hash: true
          verbose: true
